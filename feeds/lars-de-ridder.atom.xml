<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Paylogic Developers</title><link href="https://developer.paylogic.com/" rel="alternate"></link><link href="https://developer.paylogic.com/feeds/lars-de-ridder.atom.xml" rel="self"></link><id>https://developer.paylogic.com/</id><updated>2014-10-09T10:28:00+02:00</updated><entry><title>Lessons learned using SCRUM</title><link href="https://developer.paylogic.com/articles/lessons-scrum.html" rel="alternate"></link><published>2014-10-09T10:28:00+02:00</published><updated>2014-10-09T10:28:00+02:00</updated><author><name>Lars de Ridder</name></author><id>tag:developer.paylogic.com,2014-10-09:articles/lessons-scrum.html</id><summary type="html">
&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id1"&gt;Introduction&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Paylogic has been using &lt;a class="reference external" href="https://www.scrum.org/"&gt;SCRUM&lt;/a&gt; for its engineering process for years now.
We've made quite a bunch of changes throughout this time and learned a lot.
Right now we have a highly repeatable and predictable development process, which
makes it very easy for new engineers to start and almost guarantees that a
commitment will be met. I would like to share some of the most important things
we've learned along the way.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="when-doing-scrum-do-scrum"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2"&gt;When doing SCRUM, do SCRUM&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are way too many companies out there doing something and calling it SCRUM
(or agile), and not actually doing it. You have the opportunity to stand on the
shoulders of giants. Use those giants, especially when just getting started.
Understand why things are done, and only then modify if needed. Avoid &lt;a class="reference external" href="https://www.scrum.org/scrumbut"&gt;ScrumButs&lt;/a&gt;
as much as possible.&lt;/p&gt;
&lt;p&gt;And if it turns out you don't like SCRUM, use something else, but don't play
pretend.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="there-really-isn-t-much-process"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;There really isn't much process&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There's some, more than with ad hoc programming, and a bit more than with
&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Kanban_%28development%29"&gt;Kanban&lt;/a&gt;, but definitely not a lot.&lt;/p&gt;
&lt;p&gt;At Paylogic, in an average two week sprint with three teams of in total 14
engineers, we spend two hours on sprint planning, half an hour per team on
backlog grooming, about 20 minutes on the sprint demo and about 40 minutes on
the sprint retrospective. Then we of course have standups, which take about 10
minutes per day and are done on all days except for the sprint planning day.&lt;/p&gt;
&lt;p&gt;This totals to five hours of process per person per two weeks, or two and a half
hours per week. Based on a 40 hour work week, that's about 6%.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-process-that-exists-is-good"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;The process that exists is good!&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now 6% is all well and good, but every bit of process is too much if it has no
outcome. However, the structure of SCRUM merely asks you to do what you should
be doing already. Basically, you should:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Work in iterations;&lt;/li&gt;
&lt;li&gt;Make a plan for each iteration so that the business knows what's coming;&lt;/li&gt;
&lt;li&gt;Keep each other updated on your progress and your issues;&lt;/li&gt;
&lt;li&gt;Show off what you created; and&lt;/li&gt;
&lt;li&gt;Evaluate your iteration and take action to improve.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I find it hard to find fault in any of those steps, and they are basically the
only steps you have to do to implement SCRUM.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="timebox-your-meetings"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5"&gt;Timebox your meetings&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Meetings have a tendency to drag on (see also &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Parkinson%27s_law"&gt;Parkinson's Law&lt;/a&gt;). It's fairly
simple to prevent this however.&lt;/p&gt;
&lt;p&gt;In all SCRUM meetings (and most productive meetings actually), you are dealing
with a number of consecutive items, and when all are handled you're done. In the
case of the sprint planning each item is every story that fits in the sprint,
and in the case of a standup it's each member of the team. Simply set a deadline
for each item and track and enforce this deadline. People will focus on the most
important points to most optimally use their time, and after a few times, almost
no-one will get even near to the deadline.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="team-members-should-be-in-charge-of-their-individual-velocity"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6"&gt;Team members should be in charge of their individual velocity&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Engineers take pride in doing their work well. Creation is in our blood. It
should be natural to leave it up to the engineer to determine the speed in which
they feel they work, or want to work. Velocity should not automatically be
computed by a script or mandated by a team leader, and should not be averaged
out over a team. It is important to recognize the individuals in a team, and
they should have the opportunity to set their own velocity based on past results
and future ambitions.&lt;/p&gt;
&lt;p&gt;Next to that, it also makes planning a lot easier. If you have 80 story points
available in a sprint, it usually doesn't mean that you can plan a single story
estimated on 80 story points in that sprint. Work is often not that
parallelizable. If two persons can work on this story, and each person has 20
story points as their own velocity, then it's suddenly simple to see that you
can do 40 story points of that story.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="use-proper-tooling"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id7"&gt;Use proper tooling&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I wrote an article on &lt;a class="reference external" href="trello.html"&gt;how we use Trello&lt;/a&gt;, but any tool or method that allows
you to visualize the work being done and shows your progress towards the end of
the sprint is fine. Don't skip this; not having it basically means flying blind,
and you won't ever get controlled sprints.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="plan-everything"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id8"&gt;Plan everything&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Don't only plan for the user stories scheduled for a sprint. Recognize that
other work also has to be done. In our case, we had a period where we had to
reduce the commitment every sprint, because one of the engineers had to perform
maintenance on the new Continuous Integration server regularly. Keep monitoring
which work is actually done, and make sure to create space for this work to be
planned as well.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="backlog-grooming-is-essential"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id9"&gt;Backlog grooming is essential&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We started &lt;a class="reference external" href="http://scrummethodology.com/scrum-backlog-grooming/"&gt;backlog grooming&lt;/a&gt; relatively late, as we didn't think we needed it.
Turns out we did. It's really nobody's fault but the team's if it finds out
during sprint planning that a user story isn't ready for the sprint. And then
there's no time to correct it, with frustrations on all sides.&lt;/p&gt;
&lt;p&gt;Don't try to actually do estimations or even think of tasks during the grooming
sessions. The team should simply review each user story to see if they can work
on it in its current state.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="a-team-also-needs-freedom-when-determining-what-to-do"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id10"&gt;A team also needs freedom when determining what to do&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The product owner is of course responsible for the backlog, but to get good
software, the team needs to be able to influence what they work on as well.  The
team needs some room to, for example, improve its tooling and development
environment and to iterate over earlier designs. It is essential for a product
owner to take this into account.&lt;/p&gt;
&lt;p&gt;If this turns out to be difficult to negotiate, balance can be restored by
allowing the team to schedule a portion of its time (say 10%) by itself,
regardless of the backlog.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="commitment-vs-forecast"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id11"&gt;Commitment vs forecast&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In the official SCRUM description, there actually exists no such thing as a
commitment. Instead, there is a &lt;a class="reference external" href="https://www.scrum.org/About/All-Articles/articleType/ArticleView/articleId/95/Commitment-vs-Forecast-A-subtle-but-important-change-to-Scrum"&gt;forecast&lt;/a&gt;. The idea of this forecast instead
of commitment is great, the thing is however that often it doesn't matter.
Whether you use the term forecast or commitment, business people will still
expect you to deliver what you said you would deliver. Because that's how they
work.&lt;/p&gt;
&lt;p&gt;There's no real cure for this. Communication is very important here, but in the
end it's just something you should be aware of. Don't expect you can just win
this by changing the term. You'll have to change a mindset, and sometimes even a
culture, and that's much harder.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="multiple-teams-can-scrum-together"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id12"&gt;Multiple teams can SCRUM together&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having a separate SCRUM team doesn't mean they have to have their own standups
and retrospectives. In fact, that's often a bad idea. If the teams are
completely independent, kind of like different companies, then it's of course
fine. But usually, when you are part of the same company, you work together on
different parts of the same whole, and communication between teams is just as
important as communication within teams.&lt;/p&gt;
&lt;p&gt;In our case, the three teams consist of a total of about 14 members. This is
small enough so that we can still have communal standups and retrospectives.
Sprint planning and backlog grooming are done separately however.&lt;/p&gt;
&lt;p&gt;When teams get larger, a &lt;a class="reference external" href="http://guide.agilealliance.org/guide/scrumofscrums.html"&gt;SCRUM of SCRUMS&lt;/a&gt; can be used to keep communication
going.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="closing-thoughts"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id13"&gt;Closing thoughts&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;At Paylogic we've seen our process grow from being used in a single, small team,
to a single large team, to scaling to three teams. We've seen people come and
go, but the process is still going strong. I am very happy with it and with the
performance of the teams as well.&lt;/p&gt;
&lt;p&gt;Regardless, there are other alternatives that can work just as well, or perhaps
even better. When it comes to raw productivity, I actually think a Kanban
process is just a little bit better. A sprint ending and beginning is still
disruptive and does reduce productivity, more than just the hours spent on the
meetings. Kanban, being a continuous process, doesn't have this.&lt;/p&gt;
&lt;p&gt;It does require more discipline to pull off correctly however, and I believe it
is harder for a newcomer to get started with. I would like to try such a process
in Paylogic however, so perhaps I'll write another article about that by that
time.&lt;/p&gt;
&lt;!-- External references: --&gt;
&lt;/div&gt;
</summary><category term="scrum"></category><category term="agile"></category><category term="project management"></category><category term="scrum master"></category><category term="product owner"></category></entry><entry><title>How we use Trello and custom tooling to streamline our development process</title><link href="https://developer.paylogic.com/articles/trello.html" rel="alternate"></link><published>2014-10-07T12:05:00+02:00</published><updated>2014-10-07T12:05:00+02:00</updated><author><name>Lars de Ridder</name></author><id>tag:developer.paylogic.com,2014-10-07:articles/trello.html</id><summary type="html">
&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2"&gt;Introduction&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One of the challenges in the abstract world of code (and at the same time one of
the most rewarding things you can do) is to visualize the work that is being
done and that is left to do. Code is not like buildings that you can see rising
from the ground, and not even like a book that you can count the pages. This
makes it incredibly hard to gauge progress and view the status.&lt;/p&gt;
&lt;p&gt;Luckily we live in a magical world where not only there is such a thing like
code and computers to interpret it, but there are also people building awesome
things with them to solve problems. One of these things is of course Paylogic,
but another (and the thing that we will actually talk about here) is &lt;a class="reference external" href="http://trello.com/"&gt;Trello&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this article you will see how we at Paylogic use Trello, combined with custom
tooling through the power of API's, to improve our development process.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="in-the-beginning"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;In the beginning&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The world was flat, and Paylogic only used &lt;a class="reference external" href="http://www.fogbugz.com/"&gt;FogBugz&lt;/a&gt;. If you're not familiar
with FogBugz, it's a bug tracking tool created by &lt;a class="reference external" href="http://www.fogcreek.com/"&gt;Fog Creek&lt;/a&gt; that is fairly
easily extensible with &lt;a class="reference external" href="http://www.fogcreek.com/fogbugz/plugins/"&gt;plugins&lt;/a&gt;. Back then, everyone got assigned a case at
the start of the sprint, and you worked on your case until it was finished. When
it was finished, you could ask for another case. Cases came from a single
prioritized list, and were assigned by the team leader based on FTE's available
and his estimations of hours of work.&lt;/p&gt;
&lt;p&gt;So what exactly was wrong with this approach? Many things, but what I want to
focus on now is that there was no way for anyone to get an insight in the
progress of any individual case, let alone the sprint itself.&lt;/p&gt;
&lt;p&gt;Sure, you could go to an individual case in FogBugz and see how many hours were
registered on it, but that only helps you if you live in a fairy tale world
where an hour registered directly correlates with an hour less work to be done.
You could also of course talk with the engineer working on the case, but as he
didn't make the estimate and because there was no structure for creating tasks,
he often didn't really know what was left to do. As you can imagine, this led to
many issues towards the end of a sprint, with cases not being finished and
no-one knowing what was going on.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="evolution"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;Evolution&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This approach evolved quite a bit before arriving to our current solution. One
of the improvements was the introduction of the &lt;a class="reference external" href="http://www.fogcreek.com/fogbugz/plugins/plugin.aspx?ixPlugin=15"&gt;Kanban plugin&lt;/a&gt; in FogBugz,
which allowed people to see in which sprint which case would be done. Definitely
an improvement, but not yet enough.&lt;/p&gt;
&lt;p&gt;Another was to simply use wall stickies. While this was nice and tangible, it
also had its downsides. A burndown had to be drawn by hand (what are we,
peasants?), and there was a bit of a barrier (however tiny) to get up, walk over
to the board and create a card if you need one. This caused many fires (and
other work) to be undocumented and as such invisible, which made controlling the
sprint even harder.&lt;/p&gt;
&lt;p&gt;And of course, by using stickies there was no log of past sprints, a huge
downside as well. And it didn't scale. And stickies started falling off the
wall. You get my point.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="enter-trello"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5"&gt;Enter Trello&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To quote from their site: "Trello makes it easy to organize anything with
anyone". Luckily for us, it does indeed. We now use it for our sprint boards so
that teams can register their planned work and progress, as well as for our
backlog boards. I'll now go into some more detail on these boards.&lt;/p&gt;
&lt;div class="section" id="sprint-board"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id6"&gt;Sprint board&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A typical sprint board of one of our teams looks something like this:&lt;/p&gt;
&lt;img alt="Sprint board" class="align-center" src="https://developer.paylogic.com/images/trello/sprint-board.png"/&gt;
&lt;p&gt;Let's go through the columns (or lists in Trello's terminology).&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;User stories&lt;/strong&gt;: The user stories committed for this sprint. Each of these
has a case number, written before its name, and an estimate, written behind it
between brackets. You can read "knots" basically as &lt;a class="reference external" href="https://www.scrumalliance.org/community/articles/2014/january/a-practical-guide-story-points-based-estimation.aspx"&gt;story points&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;User stories - Done in sprint&lt;/strong&gt;: The user stories that fulfill the
Definition of Done, at least for within the sprint. In our case, user stories
often aren't deployed during a sprint, so there's a separate Definition of
Done for that.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;To Do&lt;/strong&gt;: This column contains the &lt;em&gt;tasks&lt;/em&gt; of the user stories that still
have to be done. The tasks are not really linked to user stories (Trello does
not provide such functionality between cards), but by using the same case
number and the same color, we can visually distinguish them quite easily.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Doing&lt;/strong&gt;: These are tasks that are currently in progress.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Done&lt;/strong&gt;: All tasks that are completed will end up here.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Fires&lt;/strong&gt;: All fires encountered in this sprint. We often use a placeholder to
keep a buffer for unexpected work.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Fires Done&lt;/strong&gt;: A fire that was completed will end up here.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;During the sprint planning, each team creates cards for the user stories and the
tasks on the sprint board of that sprint. Everything on the sprint board is part
of the commitment, so this is automatically generated.&lt;/p&gt;
&lt;p&gt;Important to note is that the team itself is in full charge of this board. Not
the team leader, not the SCRUM master, but the team. More complicated or
cumbersome tools are often by necessity managed by a single person, which is
actually a bad thing as the responsibility of owning and administrating the work
(and commitment) is then not correctly distributed. Thanks to Trello being so
accessible and easy to use, it is no problem to have the team be the owner of
this as well.&lt;/p&gt;
&lt;p&gt;After sprint planning, it's simply a matter of starting a task and moving it to
Doing, actually doing the task, and when it's done, moving it to Done and
picking up the next one. When all tasks of a story are done, the user story can
be moved to Done in sprint (after creating a codereview for the Gatekeepers in
FogBugz), and you can start work on another task. Easy as that!&lt;/p&gt;
&lt;p&gt;There are a few other things worth pointing out about the sprint boards:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;People assign themselves to cards as soon as they start work on a story. If a
story isn't started yet, it probably won't have anyone assigned to it (unless
there's a specific specialization involved). This makes it easy to see what is
started and what not.&lt;/li&gt;
&lt;li&gt;Some cards are not related to user stories. These are GTD cases. GTD stands
for Getting Things Done, and are cards needed to get a user story which was
completed in a previous sprint to production. As we have a gatekeeper and
staging workflow that usually happens in the sprint(s) after the feature was
built, it is essential to track this as well.&lt;/li&gt;
&lt;li&gt;Note the small FogBugz logo (the kiwi) on many cards? That's a link to
FogBugz, which is automatically generated by Trello. There's no such thing for
other bug trackers, but it is fairly trivial to make one yourself using
something like &lt;a class="reference external" href="http://www.greasespot.net/"&gt;Greasemonkey&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;It's also an option to create tasks as checklist items on user story cards,
and work on tasks from there. However, we felt like this obscures important
details, which for us goes against the idea of using a tool like Trello. It
might work for you however, so I did want to mention the option.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="backlogs"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id7"&gt;Backlogs&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We have three engineering teams, so we need three backlogs as well. One such
backlog board can be seen below.&lt;/p&gt;
&lt;img alt="Backlog board" class="align-center" src="https://developer.paylogic.com/images/trello/backlog-board.png"/&gt;
&lt;p&gt;As you can see, it is quite straightforward. There's a Backlog list, containing
the user stories that are up next, and there is a list for each sprint, to be
able to keep an easy overview of what was done in which sprint.&lt;/p&gt;
&lt;p&gt;For epics, we use checklists in Trello to group related stories together. In
that way, the epic can stay on top of the backlog while its individual stories
are selected from the checklist and moved into the sprint. This works well in
the case that you work on a single epic but also want to work on smaller,
unrelated stories and features next to it, as you can then prioritize the entire
functionality (which the epic encompasses) instead of just fragments of it.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="custom-tooling"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id8"&gt;Custom tooling&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The biggest advantage and simultaneous disadvantage of Trello is that it does
just one thing and does it well. This means that if you ever want to do
something else, such as generating a burndown chart, you will have to do it
yourself. So, we did.&lt;/p&gt;
&lt;div class="section" id="burndown"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id9"&gt;Burndown&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Fortunately, Trello has an excellent &lt;a class="reference external" href="https://trello.com/docs/"&gt;REST API&lt;/a&gt;, which makes it quite easy to
get the data needed for a simple burndown. We started off with a &lt;a class="reference external" href="http://echobehind.wordpress.com/2012/06/28/create-your-own-burndown-chart-using-trello-api-and-google-apps-script/"&gt;burndown chart
in Google Docs&lt;/a&gt;, which is a nice and lightweight way to start using Trello for
your sprints. It turned out we needed a bit more flexibility however, so we
developed our own burndown application, which can be seen below.&lt;/p&gt;
&lt;img alt="Custom burndown chart" class="align-center" src="https://developer.paylogic.com/images/trello/burndown.png"/&gt;
&lt;p&gt;To be able to generate a burndown using Trello however, you need a way to set
the size of a task, which we do by convention. Notice how in the sprint board
shown above every task has a number of "k" between brackets, so like (2k)?
That's our convention for setting the size of the task, which is of course
trivially parsed.&lt;/p&gt;
&lt;p&gt;Thanks to the fact that we track everything based on tasks, and because our
tasks are as a rule no larger than 4 knots, our burndown is enormously detailed
and fine-grained, and as such gives you a very realistic view of what the
progress of each team is on every given moment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="fogbugz"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id10"&gt;FogBugz&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Another thing that Trello doesn't have is time tracking. There is a Chrome
extension to allow time tracking in Trello using &lt;a class="reference external" href="https://www.getharvest.com/trello/"&gt;Harvest&lt;/a&gt;, but the thing is we
don't use Harvest; we use Fogbugz. So we developed and open sourced a &lt;a class="reference external" href="https://github.com/paylogic/trello_workon/tree/oop-refactor"&gt;simple
synchronization tool&lt;/a&gt; for that.&lt;/p&gt;
&lt;p&gt;What it does is it periodically looks at the task a member has in the "Doing"
column, finds the case corresponding to that task in FogBugz, and starts
registering hours for that user on that case (using &lt;a class="reference external" href="http://help.fogcreek.com/8202/xml-api"&gt;FogBugz's less than awesome
API&lt;/a&gt;). It's not ideal, but it works for us, and saves our engineers the hassle
of having to do double administration.&lt;/p&gt;
&lt;p&gt;Of course, being resourceful engineers, we integrated this information then
again with our burndown chart, so that we could display what every engineer is
working on right now next to the burndown chart, together with the progress of
the case. Magic!&lt;/p&gt;
&lt;img alt="Displaying of who works on what case" class="align-center" src="https://developer.paylogic.com/images/trello/workon.png"/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="closing-thoughts"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id11"&gt;Closing thoughts&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So that's in a nutshell how we use Trello for our sprints. We've been using it
for our sprint boards for nearly two years now, and it definitely has stood the
test of time. We've been using it for other things as well, such as for project
management (for which the &lt;a class="reference external" href="http://help.trello.com/customer/portal/articles/1262881-viewing-cards-in-a-calendar-view"&gt;calendar view&lt;/a&gt; is quite useful), as Kanban board for
our Operational IT team, and for storing code snippets. The fact that there is
Google Apps integration is quite a bonus for us as well (although that is only
part of their paid &lt;a class="reference external" href="https://trello.com/business-class"&gt;business class&lt;/a&gt; subscription).&lt;/p&gt;
&lt;p&gt;Now it has to be mentioned that there are many other tools out there that
attempt to solve all of our problems in a single tool. This would of course be
better, so that we wouldn't have to develop and maintain our custom tooling.
However, I personally haven't found one that I liked as much, and that allowed
the same flexibility, as what we have right now. For example, many tools that I
found don't allow you to generate a burndown based on your tasks, only of your
user stories, which in my opinion is a serious limitation. If you do have a tool
that you can recommend,  please shoot me an email or leave a comment.&lt;/p&gt;
&lt;p&gt;Oh and there is of course a Chrome plugin called &lt;a class="reference external" href="https://chrome.google.com/webstore/detail/scrum-for-trello/jdbcdblgjdpmfninkoogcfpnkjmndgje?hl=en"&gt;Scrum for Trello&lt;/a&gt;. When we
looked at it, it sadly wasn't very mature yet and it didn't fit our needs, but
it does look pretty good now. Someone also pointed out &lt;a class="reference external" href="https://chrome.google.com/webstore/detail/plus-for-trello/gjjpophepkbhejnglcmkdnncmaanojkf/related?hl=en"&gt;Plus for Trello&lt;/a&gt; to me
which I didn't know about before, but it looks promising as well. Give it a go!&lt;/p&gt;
&lt;p&gt;And don't forget to check out the &lt;a class="reference external" href="https://trello.com/taco-game"&gt;taco game&lt;/a&gt;.&lt;/p&gt;
&lt;!-- External references: --&gt;
&lt;/div&gt;
</summary><category term="trello"></category><category term="fogbugz"></category><category term="burndown"></category><category term="scrum"></category><category term="agile"></category></entry></feed>