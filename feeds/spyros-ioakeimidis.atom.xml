<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Paylogic Developers</title><link href="https://developer.paylogic.com/" rel="alternate"></link><link href="https://developer.paylogic.com/feeds/spyros-ioakeimidis.atom.xml" rel="self"></link><id>https://developer.paylogic.com/</id><updated>2014-10-27T10:00:00+01:00</updated><entry><title>Traduki</title><link href="https://developer.paylogic.com/articles/traduki.html" rel="alternate"></link><published>2014-10-27T10:00:00+01:00</published><updated>2014-10-27T10:00:00+01:00</updated><author><name>Spyros Ioakeimidis</name></author><id>tag:developer.paylogic.com,2014-10-27:articles/traduki.html</id><summary type="html">
&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id1"&gt;Introduction&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;traduki&lt;/tt&gt; is an &lt;a class="reference external" href="https://github.com/paylogic/traduki"&gt;open source&lt;/a&gt;
package, which consists of internationalization helper classes targeted for
SQLAlchemy-based python projects. The advantage of using &lt;tt class="docutils literal"&gt;traduki&lt;/tt&gt; is that
it removes the burden of defining translation tables, and provides
a consistent, intuitive and easy way to introduce internationalization into
your application. Minimalistic design allowed us to use only
&lt;a class="reference external" href="http://www.sqlalchemy.org/"&gt;SQLAlchemy&lt;/a&gt; as a python dependency.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="why-we-were-in-a-need-of-something-different"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2"&gt;Why we were in a need of something different&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As Paylogic operates in several countries, internationalization is a strong
requirement. However, we used to do internationalization differently from how
we do it these days. Our former approach was to join translation tables in order
to obtain the translations. This allowed us to search on the internationalized
fields, but it required a lot of joins, even in cases where searching was not a requirement.
We could either &lt;a class="reference external" href="http://docs.sqlalchemy.org/en/rel_0_9/orm/tutorial.html#eager-loading"&gt;eager load&lt;/a&gt;,
load relationships at the same time the parent is loaded, or
&lt;a class="reference external" href="http://docs.sqlalchemy.org/en/rel_0_9/glossary.html#term-lazy-loading"&gt;lazy load&lt;/a&gt;,
load relationships the first time they are accessed. When we lazy load,
and access an internationalized property, we cause two queries per property.&lt;/p&gt;
&lt;p&gt;One of these queries is to the translations table, and the other one
to a table with only the ids. The translations table had one translation per
row, which made it inefficient and difficult to get all the translations for
all the properties in one row. For example,&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="9%"&gt;&lt;/col&gt;
&lt;col width="34%"&gt;&lt;/col&gt;
&lt;col width="20%"&gt;&lt;/col&gt;
&lt;col width="36%"&gt;&lt;/col&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head" colspan="4"&gt;Translation&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;th class="head"&gt;id&lt;/th&gt;
&lt;th class="head"&gt;language_code&lt;/th&gt;
&lt;th class="head"&gt;text_id&lt;/th&gt;
&lt;th class="head"&gt;localized_text&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;en&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;English title 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;nl&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;Dutch title 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;en&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;English subtitle&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;nl&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;Dutch subtitle&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;en&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;English title 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;nl&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;Dutch title 2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;where the &lt;code&gt;text_id&lt;/code&gt; references the &lt;code&gt;title_id&lt;/code&gt; and
&lt;code&gt;subtitle_id&lt;/code&gt; fields from a hypothetical &lt;code&gt;Event&lt;/code&gt; table.&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="15%"&gt;&lt;/col&gt;
&lt;col width="37%"&gt;&lt;/col&gt;
&lt;col width="48%"&gt;&lt;/col&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head" colspan="3"&gt;Event&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;th class="head"&gt;id&lt;/th&gt;
&lt;th class="head"&gt;title_id&lt;/th&gt;
&lt;th class="head"&gt;subtitle_id&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;This approach was inefficient because for &lt;tt class="docutils literal"&gt;n&lt;/tt&gt; properties and &lt;tt class="docutils literal"&gt;m&lt;/tt&gt;
languages, we would need to do &lt;tt class="docutils literal"&gt;n*m&lt;/tt&gt; joins. The difficult part comes from
the fact that it was cumbersome to write those queries. In the case of
the previous example,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;a_alias&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;aliased&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Translation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;\
    &lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Translation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;\
    &lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Translation&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text_id&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;Event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;\
    &lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a_alias&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text_id&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;Event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subtitle_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;\
    &lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;in_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event_ids&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;\
    &lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The end-result was that we did not do this, and we were doing more one-row queries.
We should mention that normally we don't need objects to have dynamic list
of available languages. Maybe it is a strict requirement in other use cases,
but in our use case it is enough to just use a static set of available languages,
which change infrequently.&lt;/p&gt;
&lt;p&gt;Another issue with this approach was that the number of results returned from
queries was not deterministic, and required left joins which is even worse
performance-wise. Most of the time you want to eager load relationships.
However, in this case you can never apply a limit or offset because you cannot
trust the number of rows returned.&lt;/p&gt;
&lt;p&gt;The aforementioned approach had performance issues. We wanted to be able to
search on the internationalized fields and search fast, which was not possible.
Another requirement was that we wanted language chains. What this means is that
if your language is Dutch, but only the English version of the text is
available, we should display by default the English version of it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="advantages-of-the-new-design"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;Advantages of the new design&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In the end, taking into consideration our motivation and requirements, we came up
with our solution on how to solve the problem of i18n. The following
example illustrates our current approach using &lt;tt class="docutils literal"&gt;traduki&lt;/tt&gt;. Let's assume that we
have a table &lt;code&gt;Event&lt;/code&gt;, and we want the &lt;tt class="docutils literal"&gt;title&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;subtitle&lt;/tt&gt; to be
translated into English and Dutch. The &lt;code&gt;Event&lt;/code&gt; table contains the ids of
the fields that we wish to have available in those two languages. Let's also
assume that for the event with &lt;code&gt;id = 8&lt;/code&gt;, the Dutch translation is not
available.&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="15%"&gt;&lt;/col&gt;
&lt;col width="37%"&gt;&lt;/col&gt;
&lt;col width="48%"&gt;&lt;/col&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head" colspan="3"&gt;Event&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;th class="head"&gt;id&lt;/th&gt;
&lt;th class="head"&gt;title_id&lt;/th&gt;
&lt;th class="head"&gt;subtitle_id&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;...&lt;/td&gt;
&lt;td&gt;...&lt;/td&gt;
&lt;td&gt;...&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The &lt;code&gt;Translation&lt;/code&gt; table would then contain a reference to those fields
that we wish to have translated. The &lt;code&gt;id = 10&lt;/code&gt; for the &lt;tt class="docutils literal"&gt;title&lt;/tt&gt; and
&lt;code&gt;id = 11&lt;/code&gt; for the &lt;tt class="docutils literal"&gt;subtitle&lt;/tt&gt; of the first event, and &lt;code&gt;id = 25&lt;/code&gt;
and &lt;code&gt;id = 26&lt;/code&gt; for the &lt;tt class="docutils literal"&gt;title&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;subtitle&lt;/tt&gt; for the second event
respectively. It also contains the translated texts in English and Dutch
(only for the first event). With this approach, we can easily get the
translated texts by joining the &lt;code&gt;Event&lt;/code&gt; and &lt;code&gt;Translation&lt;/code&gt; tables.&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="10%"&gt;&lt;/col&gt;
&lt;col width="45%"&gt;&lt;/col&gt;
&lt;col width="45%"&gt;&lt;/col&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head" colspan="3"&gt;Translation&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;th class="head"&gt;id&lt;/th&gt;
&lt;th class="head"&gt;en&lt;/th&gt;
&lt;th class="head"&gt;nl&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;English title 1&lt;/td&gt;
&lt;td&gt;Dutch title 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;English subtitle 1&lt;/td&gt;
&lt;td&gt;Dutch subtitle 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;...&lt;/td&gt;
&lt;td&gt;...&lt;/td&gt;
&lt;td&gt;...&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;25&lt;/td&gt;
&lt;td&gt;English title 2&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;26&lt;/td&gt;
&lt;td&gt;English subtitle 2&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The advantage of this approach is that with a simple join between these tables
on the id of the text (for example the &lt;tt class="docutils literal"&gt;title_id&lt;/tt&gt;), we get one row with all
the translations.&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Translation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title_id&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;Translation&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;As can be seen from the query, for &lt;tt class="docutils literal"&gt;n&lt;/tt&gt; properties and &lt;tt class="docutils literal"&gt;m&lt;/tt&gt; languages,
the number of joins is reduced from &lt;tt class="docutils literal"&gt;n*m&lt;/tt&gt; to &lt;tt class="docutils literal"&gt;n&lt;/tt&gt;, making them also more
intuitive since all translated items are foreign keys to the &lt;code&gt;Translation&lt;/code&gt;
table, joining once per foreign key. Additionally, &lt;tt class="docutils literal"&gt;traduki&lt;/tt&gt; returns a user-friendly
format of this result as a dictionary of language codes and translations. For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'en'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'English title 1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'nl'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'Dutch title 1'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In case of the second event, where the Dutch translation is not available,
&lt;tt class="docutils literal"&gt;traduki&lt;/tt&gt; falls back to the language that we have defined, in this
case English. So it will return:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'en'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'English title 2'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'nl'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'English title 2'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This approach has one drawback. When a new language is introduced then we need
to alter the translations table to include it. Although this operation can be expensive,
we found out that the gains in performance are higher, because we search and sort much
more often than we add new languages. Also, for us it is more important to have a static
set of available languages than actually adding new languages.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-it-works"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;How it works&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;traduki&lt;/tt&gt; is very simple to use. The following example is a concise and
stand-alone application that illustrates the use of &lt;tt class="docutils literal"&gt;traduki&lt;/tt&gt;. It is
split in parts, to better explain how each part works.&lt;/p&gt;
&lt;div class="section" id="example"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id5"&gt;Example&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The first part is straightforward. We do standard sqlalchemy imports,
create the engine (in this case the database will be in memory), and define the
declarative base for our models.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;traduki&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;create_engine&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Integer&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy.ext.declarative&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;declarative_base&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy.orm&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;sessionmaker&lt;/span&gt;

&lt;span class="n"&gt;engine&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_engine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'sqlite://'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;Base&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;declarative_base&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The next part is where &lt;tt class="docutils literal"&gt;traduki&lt;/tt&gt; is used. We define two callbacks, one
for getting the current language and one for getting the language chain. Here
we just return hard coded data for simplicity. We could read this data from a
current &lt;tt class="docutils literal"&gt;request&lt;/tt&gt; object, for example using &lt;a class="reference external" href="http://flask.pocoo.org/"&gt;Flask&lt;/a&gt;
request, something like &lt;code&gt;flask.request.locale&lt;/code&gt; to get the current language.
We use these callbacks when we deal with the initialization of the &lt;code&gt;i18n_attributes&lt;/code&gt;.
&lt;tt class="docutils literal"&gt;traduki&lt;/tt&gt; at the moment of initialization declares the model for the translations
dynamically and sets up all the appropriate relationships.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_current_language&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;"""Current language callback for our project."""&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'en'&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_language_chain&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;"""Language chain (fall-back rule) callback for our project."""&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'*'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'en'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;i18n_attributes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;traduki&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'en'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'nl'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;get_current_language&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;get_language_chain&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The language list that we pass to &lt;code&gt;traduki.initialize&lt;/code&gt; function is used
to declare language columns in translations model. So if we use &lt;code&gt;['en', 'nl']&lt;/code&gt;
the resulting translations model would be something similar to the following declaration.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Translation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;__tablename__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'traduki_translation'&lt;/span&gt;

    &lt;span class="nb"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;primary_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;en&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UnicodeText&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nullable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;nl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UnicodeText&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nullable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Back to our example, we define our model and use the column and relation provided by
&lt;tt class="docutils literal"&gt;traduki&lt;/tt&gt;. The rest is just to have a complete and running example.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;__tablename__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'model'&lt;/span&gt;

    &lt;span class="nb"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;primary_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;title_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i18n_attributes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;i18n_column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nullable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;unique&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i18n_attributes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;i18n_relation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="sd"&gt;"""Title."""&lt;/span&gt;

&lt;span class="n"&gt;Base&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;Session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sessionmaker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Session&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'en'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'English title'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'nl'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'Dutch title'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;refresh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_dict&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'en'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'English title'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'nl'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'Dutch title'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;en&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'English title'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To run this example, copy and paste these parts in an &lt;tt class="docutils literal"&gt;example.py&lt;/tt&gt; file, and
use the following commands to install the required packages and run the
example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;virtualenv env

&lt;span class="nb"&gt;source&lt;/span&gt; env/bin/activate

pip install sqlalchemy traduki

python example.py
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="querying"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id6"&gt;Querying&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Querying translations can also be done using usual SQLAlchemy techniques.
From the previous example, lets assume that we want to get all &lt;code&gt;Model&lt;/code&gt;
instances that have English translation for their &lt;code&gt;title&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;english_title_objects&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;i18n_attributes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Translation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title_id&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;i18n_attributes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Translation&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i18n_attributes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Translation&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;en&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isnot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;i18n_attributes.Translation&lt;/code&gt; is the translations model declared during initialization
of &lt;tt class="docutils literal"&gt;traduki&lt;/tt&gt;. It provides helper methods to get the text of a specified language
and get the available languages as a dictionary. It also contains language fields as attributes,
which is nice as it enables directly attribute access to get a language for a specific field
&lt;code&gt;model.title.en&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="the-difference-from-sqlalchemy-i18n"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id7"&gt;The difference from SQLAlchemy-i18n&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We conducted research on how to make an efficient design. We tried lots of
ways to minimize the timing of the queries for large datasets. Also we've looked
around for existing solutions and we found &lt;a class="reference external" href="https://github.com/kvesteri/sqlalchemy-i18n"&gt;SQLAlchemy-i18n&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The approach of this project is to create a separate translations table and each row in the table
is a translation in a specific language for a specific field. This is similar to our
previous approach and has the same limitations in performance. You need to explicitly
query for languages and fields and do lots of joins. What &lt;tt class="docutils literal"&gt;traduki&lt;/tt&gt; does, is load all the languages
and translations for a field. This might sound like a lot of overhead at first, but in modern
applications you usually have 10-12 languages and you want them to be available all at once in
the client.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id8"&gt;Conclusion&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In general, not much has been done on i18n in open source. We hope that &lt;tt class="docutils literal"&gt;traduki&lt;/tt&gt; will prove
useful for projects that require an efficient and easy to use internationalization system.
We are waiting for your feedback and recommendations. Check &lt;a class="reference external" href="https://github.com/paylogic/traduki"&gt;traduki&lt;/a&gt;
in our github profile.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="internationalization"></category><category term="sqlalchemy"></category><category term="python"></category><category term="database"></category><category term="i18n"></category></entry><entry><title>Settei</title><link href="https://developer.paylogic.com/articles/settei.html" rel="alternate"></link><published>2014-04-29T12:03:00+02:00</published><updated>2014-04-29T12:03:00+02:00</updated><author><name>Spyros Ioakeimidis</name></author><id>tag:developer.paylogic.com,2014-04-29:articles/settei.html</id><summary type="html">
&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;Introduction&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;settei&lt;/code&gt; is a general purpose python settings library which uses
&lt;a class="reference external" href="http://pythonhosted.org/setuptools/pkg_resources.html#entry-points"&gt;entry points&lt;/a&gt;
as a registry, inspired by &lt;a class="reference external" href="http://pythonhosted.org/setuptools/setuptools.html"&gt;setuptools&lt;/a&gt;.
It is a library which provides the possibility to define
and use configuration settings from entry points for specific applications and
environments. &lt;code&gt;settei&lt;/code&gt; introduces the following terms:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;environment&lt;/strong&gt;: the name of an entry point&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;group&lt;/strong&gt;: a group of defined environments&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;application&lt;/strong&gt;: part of a group's name and refers to the application to which
settings apply&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A minimal app that illustrates the use of &lt;cite&gt;settei&lt;/cite&gt; can be found
&lt;a class="reference external" href="https://github.com/paylogic/settei-example"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="motivation"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;Motivation&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;At Paylogic we are extensively using &lt;a class="reference external" href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt;
web framework for most parts of our system. Django uses the concept of
&lt;a class="reference external" href="https://docs.djangoproject.com/en/1.6/topics/settings/"&gt;setting files&lt;/a&gt;, in
which we can define application-specific settings, such as &lt;tt class="docutils literal"&gt;DEBUG&lt;/tt&gt;. In the
rest of the application we can access these settings using for example
&lt;code&gt;django.conf.settings.DEBUG&lt;/code&gt;. However, for other parts of our system we
are using &lt;a class="reference external" href="http://flask.pocoo.org/"&gt;Flask&lt;/a&gt;, which follows a similar, but
slightly different way to define &lt;a class="reference external" href="http://flask.pocoo.org/docs/config/"&gt;configuration settings&lt;/a&gt;. In a Flask application a setting can
be accessed by for example &lt;code&gt;app.config['DEBUG']&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Soon we were confronted with the limitation to share configuration settings
between Flask and Django applications. Additionally, we wanted to keep these
configurations consistent. However, we found out that there was no
framework-agnostic Python library for specifying configuration settings.&lt;/p&gt;
&lt;p&gt;Moreover, as we have a clear separation between environments (e.g. dev, staging,
live etc.), some configuration settings are either set in one environment and
not in the others, or the same configuration settings have different values
depending on the environment. The code however should not know anything about
the environment in which it is executed. In this way the code does not need to
be modified, even when multiple environments are used.&lt;/p&gt;
&lt;p&gt;For this reason, we initially decided to create separate files to store
configuration settings, which could also change depending on the environment.
However, we ended up with many of these files, which at some point became
cumbersome to maintain.  Furthermore, some developers started importing settings
from these files and others used the standard way of Django. The result of this
is inconsistencies and conflicts, as the same setting can be imported from
different places.&lt;/p&gt;
&lt;div class="section" id="requirements"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id5"&gt;Requirements&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Based on this motivation, we came up with a number of requirements for a settings
configuration system.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Introducing a new environment should be easy and without too much hassle.&lt;/li&gt;
&lt;li&gt;We should have the possibility to inherit/extend settings from other
environments.  This would allow us to build a modular and extensible structure
of configuration settings.&lt;/li&gt;
&lt;li&gt;There should be no specific template structure involved for generating
settings, because it gets really hard and cumbersome to read templates with
tons of expressions.&lt;/li&gt;
&lt;li&gt;It should be possible to store settings separately from applications and
scripts. The advantage of this is that we can create secret settings (usually
for the production environment) in a way that also makes them safe and that
does not depend on a specific application.&lt;/li&gt;
&lt;li&gt;A configuration settings system should be framework-agnostic so that it can be used
when multiple frameworks are involved.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="design"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6"&gt;Design&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The most important design decision of &lt;code&gt;settei&lt;/code&gt; is to base its implementation
on the concept of &lt;a class="reference external" href="http://pythonhosted.org/setuptools/pkg_resources.html#entry-points"&gt;entry points&lt;/a&gt;
in order to create a framework-agnostic library for configuration settings.&lt;/p&gt;
&lt;div class="section" id="id2"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id7"&gt;Entry points&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Entry points provide an intuitive way for distributions to expose Python objects,
such as functions or classes, so that they can be used by other distributions.
Applications can then search for specific entry points. &lt;code&gt;settei&lt;/code&gt; uses the
concept of entry points to define groups of environments.&lt;/p&gt;
&lt;p&gt;So, what does using entry points mean? It means that we will have the possibility
to store settings in a distribution. Then, if we want to get access to settings of
e.g. a default or a local environment, we will need to have access to install this
distribution and include this distribution in the &lt;tt class="docutils literal"&gt;PYTHONPATH&lt;/tt&gt; of the script
or application.&lt;/p&gt;
&lt;div class="section" id="groups-and-environments"&gt;
&lt;h4&gt;Groups and environments&lt;/h4&gt;
&lt;p&gt;A group is a container of environments. An example of a group with two environments
could be:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="c1"&gt;# ...&lt;/span&gt;
    &lt;span class="n"&gt;entry_points&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;'settings_application_name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="s1"&gt;'default = path.to.package.of.application_name.default_settings:generate_config'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;'local = path.to.package.of.application_name.local_settings:generate_config'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="c1"&gt;# ...&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The name of the group consists of two parts. The first is a standard prefix
part, &lt;code&gt;settings_&lt;/code&gt;, and the second is the name of the application. For
example, &lt;code&gt;settings_application_name&lt;/code&gt;, where &lt;code&gt;application_name&lt;/code&gt; is
the name of the application. The prefix part in the group name is mandatory as
it helps &lt;code&gt;settei&lt;/code&gt; to identify only entry points useful for it and iterate
through them.&lt;/p&gt;
&lt;p&gt;Each environment name inside a group must be &lt;tt class="docutils literal"&gt;unique&lt;/tt&gt;. In our example, in the
group &lt;code&gt;settings_application_name&lt;/code&gt; there should only be one environment named
&lt;code&gt;default&lt;/code&gt; and only one named &lt;code&gt;local&lt;/code&gt;. However, we can specify same
environment names that belong to different groups. If we specify environments
with the same name inside one group, then a &lt;code&gt;DuplicateEntryPoint&lt;/code&gt; exception
will be raised. This exception is used to avoid cases of scripts borrowing
settings from each other. For example, lets assume that in the previous example
we specified the &lt;tt class="docutils literal"&gt;default&lt;/tt&gt; environemnt twice. It would not be clear from which
file (default_settings.py or local_settings.py) we would read settings.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="example-usage"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id8"&gt;Example Usage&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;settei&lt;/code&gt; package can be configured and used in a series of simple steps.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Define groups and environments in the &lt;tt class="docutils literal"&gt;setup.py&lt;/tt&gt; of the package.&lt;/li&gt;
&lt;li&gt;For each environment (e.g. default_settings), define the function to be used
as an entry point.&lt;/li&gt;
&lt;li&gt;Implement this function in the environment files (e.g. default_settings.py).
They should create and return a new instance of &lt;code&gt;Config&lt;/code&gt; with
configuration settings for this environment.&lt;/li&gt;
&lt;li&gt;Use the &lt;code&gt;get_config&lt;/code&gt; function in the rest of the package to read
configuration settings for specific applications and environments.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The best way to explain how &lt;code&gt;settei&lt;/code&gt; can be used is through examples.
The rest of this section goes into more detail for each of the above steps.&lt;/p&gt;
&lt;div class="section" id="define-groups-and-environments"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id9"&gt;Define groups and environments&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As a first step, we need to define environments and put them into groups. We are
free to choose the name of the function to be used as an entry point. In this case,
we chose the name &lt;code&gt;generate_config&lt;/code&gt;. Let's assume that our package contains
two applications.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# package/setup.py&lt;/span&gt;
&lt;span class="n"&gt;setup&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="c1"&gt;# ...&lt;/span&gt;
    &lt;span class="n"&gt;entry_points&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;'settings_application1'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="s1"&gt;'default = path.to.application1.default_settings:generate_config'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;'local = path.to.application1.local_settings:generate_config'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="s1"&gt;'settings_application2'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="s1"&gt;'default = path.to.application2.default_settings:generate_config'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;'local = path.to.application2.local_settings:generate_config'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="create-settings"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id10"&gt;Create settings&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To create settings, we need an instance of the &lt;code&gt;Config&lt;/code&gt; class.
In the following example, we are using the function named &lt;code&gt;generate_config&lt;/code&gt;,
which we specified as an entry point when we defined the groups and environments.
The &lt;code&gt;generate_config&lt;/code&gt; function, in our case, returns an instance of the
&lt;code&gt;Config&lt;/code&gt; class. Settings can then be created either directly in the code,
be loaded from a python file, or come from an object. If there is any error
during configuration or a &lt;code&gt;Config&lt;/code&gt; instance is not returned, then a
&lt;code&gt;WrongConfigTypeError&lt;/code&gt; exception is raised.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# package/application1/default_settings.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;settei.config&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Config&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;generate_config&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;# create settings directly&lt;/span&gt;
    &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'QUESTION'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'The Ultimate Question of Life, the Universe, and Everything'&lt;/span&gt;
    &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'ANSWER'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;41&lt;/span&gt;

    &lt;span class="c1"&gt;# or load them from a file&lt;/span&gt;
    &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_pyfile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'full/path/to/file.py'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# or from an object&lt;/span&gt;
    &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'path.to.object'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="read-settings"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id11"&gt;Read settings&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In order to use the settings of our package, we need to first install it using
&lt;code&gt;python setup.py install&lt;/code&gt; and make sure that it is in our path. We can then
read and use settings in the rest of our package
by using the &lt;code&gt;get_config&lt;/code&gt; function. Note that in the &lt;code&gt;get_config&lt;/code&gt;
function we specify the application name and not the group name. For example,
if we want to load settings for the application &lt;code&gt;application1&lt;/code&gt; and we have
defined a group of environments with the name &lt;code&gt;settings_application1&lt;/code&gt;,
then in the &lt;code&gt;get_config&lt;/code&gt; function we just use the name of the application,
which in this case is &lt;code&gt;application1&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;settei&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_config&lt;/span&gt;

&lt;span class="c1"&gt;# get config settings for 'applicaion1' application and 'local' environment&lt;/span&gt;
&lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'application1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'local'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# get config settings for 'application2' application and 'local' environment&lt;/span&gt;
&lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'application2'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'local'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# now you can use it as you want&lt;/span&gt;
&lt;span class="n"&gt;DEBUG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'DEBUG'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If the environment from which we want to read settings does not exist, then an
&lt;code&gt;EnvironmentNotSpecified&lt;/code&gt; exception is raised.&lt;/p&gt;
&lt;p&gt;Another way to define the desired environment is using the
&lt;code&gt;CONFIG_ENVIRONMENT&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# run in this way&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt; &lt;span class="n"&gt;CONFIG_ENVIRONMENT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'dev'&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;my_incredible_script&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then, in &lt;tt class="docutils literal"&gt;my_incredible_script.py&lt;/tt&gt; when the &lt;code&gt;get_config&lt;/code&gt; function is
used, we do not need to specify an environment as it will use the &lt;code&gt;dev&lt;/code&gt;
environment that is defined by &lt;code&gt;CONFIG_ENVIRONMENT&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# and in my_incredible_script.py we can use get_config&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;settei&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_config&lt;/span&gt;

&lt;span class="c1"&gt;# get config settings for 'application1' application and 'dev' environment,&lt;/span&gt;
&lt;span class="c1"&gt;# which has been specified when running my_incredible_script.py&lt;/span&gt;
&lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'application1'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="settings-inheritance"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id12"&gt;Settings inheritance&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Settings can also inherit other settings. However, this is only possible
for settings that belong to the same group of environments. For instance, if
you want your &lt;code&gt;local&lt;/code&gt; settings to inherit the &lt;code&gt;default&lt;/code&gt; settings,
then in the &lt;code&gt;generate_config&lt;/code&gt; function you should mention the name of
environment from which you want to inherit.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# in your application1/local_settings.py file&lt;/span&gt;
&lt;span class="c1"&gt;# 'default' is the environment from which we want to inherit settings&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;generate_config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="c1"&gt;# change a setting, the right answer is 42&lt;/span&gt;
    &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'ANSWER'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we read the &lt;code&gt;local&lt;/code&gt; settings, then we will see that
&lt;code&gt;config['ANSWER']&lt;/code&gt; setting returns the value defined in
&lt;code&gt;local_settings.py&lt;/code&gt;, as we would expect.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;settei&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_config&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'application1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'local'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'QUESTION'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;Ultimate&lt;/span&gt; &lt;span class="n"&gt;Question&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;Life&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;Universe&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;Everything&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'ANSWER'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="mi"&gt;42&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Inheriting other settings does not stop us from introducing additional ones.
Attention should be paid though as new settings could be overwritten by any
inherited ones with the same name.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# in your package/application1/local_settings.py file&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;settei.config&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Config&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;generate_config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;local&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;# change a setting, the right answer is 42&lt;/span&gt;
    &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'ANSWER'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;

    &lt;span class="c1"&gt;# introduce an additional setting&lt;/span&gt;
    &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'NEW'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'A new setting'&lt;/span&gt;

    &lt;span class="c1"&gt;# this will be overwritten with the 'ANSWER' from the 'default' environment&lt;/span&gt;
    &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'ANSWER'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;43&lt;/span&gt;

    &lt;span class="c1"&gt;# update the 'local' settings with the 'default' settings&lt;/span&gt;
    &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# local['ANSWER'] will be 42 here again&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;local&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If the provided environment in &lt;code&gt;generate_config&lt;/code&gt; is missing or not
specified, then an &lt;code&gt;EnvironmentIsMissing&lt;/code&gt; or &lt;code&gt;EnvironmentNotSpecified&lt;/code&gt;
exception will be raised respectively. If we try to specify more than one
environment to inherit settings from, then a &lt;code&gt;MoreThanOneDependencyInjection&lt;/code&gt;
exception will be raised.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id13"&gt;Conclusion&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;settei&lt;/code&gt; is a package, which bases its implementation on the concept of
entry points from setuptools, to provide a maintainable way of creating configuration
settings. &lt;code&gt;settei&lt;/code&gt; makes it very easy and intuitive to introduce a new environment,
e.g. a live environment, where settings usually differ a lot from those used
during development. Finally, settings inheritance, which is accomplished by using
dependency injection, provides the modularity and extensibility we needed.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="open source"></category><category term="python"></category><category term="settings"></category><category term="entry points"></category><category term="setuptools"></category></entry><entry><title>Prefill Registration Data</title><link href="https://developer.paylogic.com/articles/prefill-registration.html" rel="alternate"></link><published>2013-12-02T10:56:00+01:00</published><updated>2013-12-02T10:56:00+01:00</updated><author><name>Spyros Ioakeimidis</name></author><id>tag:developer.paylogic.com,2013-12-02:articles/prefill-registration.html</id><summary type="html">
&lt;p&gt;&lt;em&gt;Paylogic offers a feature to allow the prefilling of the personal data of a
consumer during the sales process via a personalized URL. This can be used
whenever a merchant already has the data of the consumers and wants to offer
these consumers a more personalized and smooth ticketing process, or when a
pre-registration step is used. The following sections describe the steps that
third parties have to implement in order to provide the possibility of
prefilling the registration form in the front office.&lt;/em&gt;&lt;/p&gt;
&lt;div class="section" id="json-data-format"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;JSON data format&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The first step is to construct the data. The data should be structured using
JSON. The JSON data should adhere to the following format:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;"first_name"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"Test Client First Name"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;"last_name"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"Test Client Last Name"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;"email"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"test@testmail.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;"gender"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;"birth_date"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"1978-10-07"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;"phone_number"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"0123456789"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;"address"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"Address 1A"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;"postal_code"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"9999AB"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;"city"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"Groningen"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;"country"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"NL"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;gender&lt;/code&gt; attribute should contain a code according to &lt;a class="reference external" href="http://en.wikipedia.org/wiki/ISO/IEC_5218"&gt;ISO 5218&lt;/a&gt;, which specifies the following
codes:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;0 = not known&lt;/li&gt;
&lt;li&gt;1 = male&lt;/li&gt;
&lt;li&gt;2 = female&lt;/li&gt;
&lt;li&gt;9 = not applicable&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The format of the &lt;code&gt;birth_date&lt;/code&gt; attribute should be &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
This format is according to &lt;a class="reference external" href="http://en.wikipedia.org/wiki/ISO_8601"&gt;ISO 8601&lt;/a&gt;.
Finally, the &lt;code&gt;country&lt;/code&gt; code attribute should contain a value according to
&lt;a class="reference external" href="http://www.iso.org/iso/country_codes/iso_3166_code_lists/country_names_and_code_elements.htm"&gt;ISO 3166&lt;/a&gt;.
For example, for The Netherlands the country code &lt;code&gt;NL&lt;/code&gt; should be used. It
should be mentioned that no certain format is required for &lt;code&gt;postal_code&lt;/code&gt;,
as long as its length is less than or equal to 12.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="compression-and-encoding"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;Compression and Encoding&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The second step is to compress and encode the data. Compression helps to reduce
the length of the data, as the URL should contain up to a maximum number of
characters. It is not only that the JSON data itself might be long. Encoding
also increases the length of the data by approximately 33%.&lt;/p&gt;
&lt;p&gt;The pseudo code below illustrates the process of encoding and compression. It
also includes the creation of the JSON data. The data should first be compressed
and then encoded.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
create the JSON data

create a string out of the JSON data

compress the data using gzip compatible compression

encode the data using base64 and make them url safe
&lt;/pre&gt;
&lt;p&gt;The way encoding and compression can be implemented depends on which programming
language is used. A simple implementation is illustrated both for Python and
PHP. If there are any questions regarding the implementation, then please contact
the Paylogic support team.&lt;/p&gt;
&lt;div class="section" id="python"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id5"&gt;Python&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The compression is done using the &lt;a class="reference external" href="http://www.zlib.net/"&gt;zlib&lt;/a&gt;
standard python module. The data is encoded to utf-8 prior to compression. Data
encoding is performed using base64 as specified in &lt;a class="reference external" href="http://tools.ietf.org/html/rfc3548.html"&gt;RFC 3548&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;zlib&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;base64&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;urlsafe_b64encode&lt;/span&gt;

&lt;span class="c1"&gt;# construct the json data&lt;/span&gt;
&lt;span class="n"&gt;json_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"first_name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"Test Client First Name"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# create a string of the json data&lt;/span&gt;
&lt;span class="n"&gt;json_data_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json_data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# encode the data to utf8 and compress it&lt;/span&gt;
&lt;span class="n"&gt;compressed_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;zlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json_data_string&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'utf8'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;# encode the data using base64 and urlsafe&lt;/span&gt;
&lt;span class="n"&gt;encoded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;urlsafe_b64encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;compressed_data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="php"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id6"&gt;PHP&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The compression is done using the &lt;a class="reference external" href="http://php.net/manual/en/function.gzcompress.php"&gt;gzcompress&lt;/a&gt;
method, which uses the &lt;a class="reference external" href="http://www.zlib.net/"&gt;zlib&lt;/a&gt; data format. The data is
encoded to utf-8 prior to compression. Data encoding is performed using base64
as specified in &lt;a class="reference external" href="http://tools.ietf.org/html/rfc3548.html"&gt;RFC 3548&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="c1"&gt;# create a string of the json data&lt;/span&gt;
&lt;span class="nv"&gt;$json_data_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'{"first_name": "Test Client First Name", ... }'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# encode data to utf8 and compress it&lt;/span&gt;
&lt;span class="nv"&gt;$compressed_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;gzcompress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;utf8_encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$json_data_string&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="c1"&gt;# encode the data using base64&lt;/span&gt;
&lt;span class="nv"&gt;$encoded_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;base64_encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$compressed_data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;# make data urlsafe&lt;/span&gt;
&lt;span class="nv"&gt;$encoded_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str_replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'+'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'-'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'_'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nv"&gt;$encoded_data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="transferring-the-data"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id7"&gt;Transferring the data&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The third step is to append the encoded and compressed data to the landing page
URL. The landing page URL is the URL that is usually included within the
invitation emails. The encoded and compressed data should be appended to the
landing page URL &lt;strong&gt;after&lt;/strong&gt; the fragment identifier (&lt;strong&gt;#&lt;/strong&gt;). The advantage of
this approach is that data after the fragment identifier is not sent over the
network and is only used client-side.&lt;/p&gt;
&lt;p&gt;The implementation of this is left to the third parties. The only constraint is
that the appended data should have a specific form. We assume that the landing
page URL contains some query parameters (substituted with '...' in the
following example for clarity) and &lt;code&gt;FGRAhdfhasAHDFA&lt;/code&gt; is the encoded and
compressed data. Then, a landing page URL with the appended data would have the
following form:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
http://tickets.company.com/?...#pld=FGRAhdfhasAHDFA
&lt;/pre&gt;
&lt;p&gt;It is important to use &lt;code&gt;pld&lt;/code&gt; as a parameter, as this is also used on the
side of Paylogic, when retrieving the data from the URL. The above method will
work if Paylogic handles the creation of the landing page.&lt;/p&gt;
&lt;div class="section" id="third-party-handles-landing-page"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id8"&gt;Third party handles landing page&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In case a third party handles the creation of the landing page, then one more
step needs to be performed. The Javascript code below should be appended at the
end of the landing page HTML document. This ensures that the data is read from
the landing page URL and that it is appended in the queue URL, which resides as
an iframe inside the landing page HTML document.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text/javascript"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;getHashParam&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/([^#&amp;amp;]+)/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// This is to ensure that if the variable contains '=' then they remain in the value.&lt;/span&gt;
    &lt;span class="c1"&gt;// for example: pld=FHadfsdhFJASDF3423==&lt;/span&gt;
    &lt;span class="c1"&gt;// In this case:&lt;/span&gt;
    &lt;span class="c1"&gt;//   key: pld&lt;/span&gt;
    &lt;span class="c1"&gt;//   value: FHadfsdhFJASDF3423==&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;param&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/=(.+)?/&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;param&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s2"&gt;"pld"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;queue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'paylogic-frontoffice'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;'#'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;param&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;'='&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;param&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;getHashParam&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="integration"></category></entry></feed>